# ansible-playbook software-release.yaml -K -i inventory
#
---
- name: Install PXE server minimal
  hosts: srv
  vars:
    master_iface: { name: "enp0s3" } # NAT, external
    target_iface:
      {
        name: "enp0s8",
        ip: "192.168.3.1",
        netmask: "255.255.255.0",
        prefix: 24,
        combined: "192.168.3.1/24",
      }
    destination_folder: "server"
    distro_url: "https://releases.ubuntu.com/22.04/"
    distro_name: "ubuntu-22.04.3-live-server-amd64.iso"
    distro_dest: "/var/www/html/{{ distro_name }}"

    #vars_prompt:
    #  - name: "target_iface_name"
    #    prompt: "Enter target inferface name:"
    #    default: "enp0s8"

  tasks:
    - name: Install prerequsites
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      become: yes
      with_items:
        - dnsmasq
        - dnsutils
        - ldnsutils
        - iptables-persistent
        - nfs-kernel-server
        - apache2
        - wget
        - whois
        - iputils-ping
        - syslinux
        - pxelinux
        - vim
        - lsof
    #     # - samba
    #     # - rsync
    - name: Create directory for netplan
      become: yes
      ansible.builtin.file:
        path: /etc/netplan
        state: directory
        mode: 0700
    - name: Set up server interface
      become: yes
      ansible.builtin.template:
        src: templates/netplan.yaml
        dest: /etc/netplan/00-installer-config.yaml
        mode: 0400
    - name: Create directory for TFTP
      become: yes
      ansible.builtin.file:
        path: /srv/tftp/{{ item }}
        state: directory
        mode: 0777
      with_items:
        - "{{ destination_folder }}"
        - pxelinux.cfg
    - name: Create a symbolic link for BIOS p1
      ansible.builtin.file:
        src: /usr/lib/PXELINUX/pxelinux.0
        dest: /srv/tftp/pxelinux.0
        state: link
    - name: Create a symbolic link for BIOS p2
      ansible.builtin.file:
        src: /usr/lib/syslinux/modules/bios/{{ item }}
        dest: /srv/tftp/{{ item }}
        state: link
      with_items:
        - ldlinux.c32
        #  - libcom32.c32
        #  - libutil.c32
        #  - vesamenu.c32
    - name: Download Ubuntu
      become: yes
      get_url:
        url: "{{ distro_url }}{{ distro_name }}"
        dest: "{{ distro_dest }}"
        mode: 0644
    - name: Mount DVD to copy kernel
      become: yes
      ansible.posix.mount:
        path: /mnt
        src: "{{ distro_dest }}"
        fstype: iso9660
        opts: ro,loop
        state: mounted
    - name: Copy kernel to TFTP
      ansible.builtin.copy:
        src: /mnt/casper/{{ item }}
        dest: /srv/tftp/{{ destination_folder }}/{{ item }}
        remote_src: true
      with_items:
        - initrd
        - vmlinuz
    - name: UnMount DVD
      become: yes
      ansible.posix.mount:
        path: /mnt/
        state: unmounted
    - name: Add a TFTP exports
      become: yes
      ansible.builtin.lineinfile:
        path: /etc/exports
        line: "/srv/tftp/  {{ target_iface['ip'] }}(ro,sync,no_wdelay,insecure_locks,no_root_squash,insecure,no_subtree_check)"
        create: yes
    - name: Bootloader default menu config
      ansible.builtin.template:
        src: templates/boot-menu
        dest: /srv/tftp/pxelinux.cfg/
        mode: 0644
    - name: Create user-data directory
      become: yes
      ansible.builtin.file:
        path: /var/www/html/{{ destination_folder }}/
        state: directory
        mode: 0777
    - name: Cloud Init user data
      ansible.builtin.template:
        src: templates/{{ destination_folder }}.yaml
        dest: /var/www/html/{{ destination_folder }}/user-data
        mode: 0644
    - name: Cloud Init other templates
      ansible.builtin.file:
        dest: /var/www/html/{{ destination_folder }}/{{ item }}
        state: touch
        mode: 0644
      with_items:
        - vendor-data
        - meta-data
    - name: IP Tables NAT config propagation
      become: yes
      ansible.builtin.template:
        src: templates/rules.v4
        dest: /etc/iptables/
    - name: DNS masq config propagation dns
      become: yes
      ansible.builtin.template:
        src: templates/dns
        dest: /etc/dnsmasq.d/
    - name: DNS masq config propagation
      become: yes
      ansible.builtin.template:
        src: templates/dnsmasq.conf
        dest: /etc/
    - name: Apply net plan
      become: yes
      ansible.builtin.shell:
        cmd: "netplan apply"
    - name: Firewall apply
      become: yes
      ansible.builtin.shell:
        cmd: "/sbin/iptables-restore < /etc/iptables/rules.v4"
    # Set ip forwarding on in /proc and in the sysctl file and reload if necessary
    - name: Swt sysctl IPv4 forwarding
      become: yes
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: 1
        sysctl_set: true
        state: present
        reload: true
    - name: resolved.conf update
      become: yes
      ansible.builtin.template:
        src: templates/resolved.conf
        dest: /etc/etc/systemd/
    - name: Activate and restart TFTP and DNS services
      become: yes
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      with_items:
        - nfs-kernel-server
        - systemd-resolved
        - dnsmasq
        #  exportfs -a ??
